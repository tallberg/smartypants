import { Injectable } from '@angular/core';

export interface solution {
  key: string|number,
  result: string,
  delimitedResult: string,
  stats?: cryptoStatistics
} 

export interface cryptoStatistics {
  /** Sum of unigram difference compared to language specific reference, 0-200, less is better */
  unigram?: number,
  /** Number of occurances of topp 100 bigrams minus occurances of bottom 100 bigrams, higher is better */
  bigram?: number,
  /** Sum och word lengths of occurig common words */
  words?: number,
  /** Value based on accumulated statistics, higher is better */
  val?: number
}

@Injectable({
  providedIn: 'root'
})

/**
 * Common integer sequences
 * Get inspired at The On-Line Encyclopedia of Integer Sequences
 * https://oeis.org/
 * 
 * TODO: Move to shared service and add more primes; twins, cousins, isolated, sexy... 
 */
export class Sequence {

  /**
   * 1000 digits from varius constants to use with the fromString function to generate sequences
   * Ex fromString(constants.pi, 3, 10) => [314, 159, 265, 358, 979, 323, 846, 264, 338, 327, 950]
   * https://www.math.utah.edu/~pa/math/sqrt2.html
   * https://www2.cs.arizona.edu/icon/oddsends/other.htm
   */
  public static constants = {
    pi : "314159265358979323846264338327950288419716939937510582097494459230781643141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198",
   /** Eulers number */
    e : "271828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901157383418793070215408914993488416750924476146066808226480016847741185374234544243710753907774499206955170276183860626133138458300075204493382656029760673711320070932870912744374704723069697720931014169283681902551510865746377211125238978442505695369677078544996996794686445490598793163688923009879312773617821542499922957635148220826989519366803318252886939849646510582093923982948879332036250944311730123819706841614039701983767932068328237646480429531180232878250981945581530175671736133206981125099618188159304169035159888851934580727386673858942287922849989208680582574927961048419844436346324496848756023362482704197862320900216099023530436994184914631409343173814364054625315209618369088870701676839642437814059271456354906130310720851038375051011574770417189861068739696552126715468895703503",
   /** Square root of 2 */
    sqrt2: "141421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623091229702492483605585073721264412149709993583141322266592750559275579995050115278206057147010955997160597027453459686201472851741864088919860955232923048430871432145083976260362799525140798968725339654633180882964062061525835239505474575028775996172983557522033753185701135437460340849884716038689997069900481503054402779031645424782306849293691862158057846311159666871301301561856898723723528850926486124949771542183342042856860601468247207714358548741556570696776537202264854470158588016207584749226572260020855844665214583988939443709265918003113882464681570826301005948587040031864803421948972782906410450726368813137398552561173220402450912277002269411275736272804957381089675040183698683684507257993647290607629969413804756548237289971803268024744206292691248590521810044598421505911202494413417285314781058036033710773091828693147101711116839165817268894197587165821521282295184884",
    /** Golden ratio */
    phi: "161803398874989484820458683436563811772030917980576286213544862270526046281890244970720720418939113748475408807538689175212663386222353693179318006076672635443338908659593958290563832266131992829026788067520876689250171169620703222104321626954862629631361443814975870122034080588795445474924618569536486444924104432077134494704956584678850987433944221254487706647809158846074998871240076521705751797883416625624940758906970400028121042762177111777805315317141011704666599146697987317613560067087480710131795236894275219484353056783002287856997829778347845878228911097625003026961561700250464338243776486102838312683303724292675263116533924731671112115881863851331620384005222165791286675294654906811317159934323597349498509040947621322298101726107059611645629909816290555208524790352406020172799747175342777592778625619432082750513121815628551222480939471234145170223735805772786160086883829523045926478780178899219902707769038953219681986151437803149974110692608867429622675756052317277752035361393"
  }


   /**
   * Returns n numbers generated from seed string
   * @param seed 
   * @param digits
   * @param n 
   */
  public static fromString(seed: string, digits: number, n: number) {    
    if (digits < 1 || n < 1) {
      return [];
    }
    if (seed.length / digits < n) {
      console.error(`Seed can not generate a sequence longer than ${Math.floor(seed.length / digits)}`);
      return [];
    }
    let sequence = [];
    for(let i = 0; sequence.length <= n; i = i + digits) {
      sequence.push(+seed.substr(i, digits));
    }
    return sequence;
  }

   /**
   * An arithmetic progression (AP) or arithmetic sequence is a sequence of numbers 
   * such that the difference between the consecutive terms is constant. 
   * For instance, the sequence 5, 7, 9, 11, 13, 15, . . . 
   * is an arithmetic progression with a common difference of 2.
   * @param start Starting value
   * @param difference Value added to get next number in sequence
   * @param n Length of sequence
   */
  public static arithmetic(start: number, difference: number, n: number): number[] {
    if (typeof n !== 'number' || n < 1) {
      return [];
    } 
    let sequence = [start];   
    for(let i = 1; i < n; i++) {
      sequence.push(sequence[i-1] + difference);
    }
    return sequence;
  }

  /**
   * Returns n square numbers.
   * 1, 4, 9, 16, 25, 36, 49, 64, 81, 100...
   * @param n 
   */
  public static square(n: number): number[] {
    if (typeof n !== 'number' || n < 1) {
      return [];
    } 
    let sequence = [];   
    for(let i = 1; i < n; i++) {
      sequence.push(i*i);
    }
    return sequence;
  }

    /**
   * Returns n cube numbers.
   * 1, 8, 27, 64, 125, 216, 343, 512, 729...
   * @param n 
   */
  public static cube(n: number): number[] {
    if (typeof n !== 'number' || n < 1) {
      return [];
    } 
    let sequence = [];   
    for(let i = 1; i < n; i++) {
      sequence.push(i*i*i);
    }
    return sequence;
  }

   /**
   * Returns n triangular numbers.
   * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55...
   * @param n 
   */
  public static triangular(n: number): number[] {
    if (typeof n !== 'number' || n < 1) {
      return [];
    } 
    let sequence = [1];   
    for(let i = 1; i < n; i++) {
      sequence.push(sequence[i-1] + i + 1);
    }
    return sequence;
  }

  /**
   * Returns n hexagonal numbers.
   * https://en.wikipedia.org/wiki/Hexagonal_number
   * 1, 6, 15, 28, 45, 66, 91, 120, 153, 190, 231 ...
   * @param n 
   */
  public static hexagonal(n: number): number[] {
    if (typeof n !== 'number' || n < 1) {
      return [];
    } 
    let sequence = [];   
    for(let i = 1; i <= n; i++) {
      sequence.push(2 * i * i - i);
    }
    return sequence;
  }

  /**
   * Returns n centered hexagonal number.
   * https://en.wikipedia.org/wiki/Centered_hexagonal_number
   * 1, 6, 15, 28, 45, 66, 91, 120, 153, 190, 231 ...
   * @param n 
   */
  public static hexagonalCentered(n: number): number[] {
    if (typeof n !== 'number' || n < 1) {
      return [];
    } 
    const sequence = Array(n);
    sequence[0] = 1;
    for(let i = 1; i < n; i++) {
      sequence[i] = 6 * i + sequence[i-1];
    }
    return sequence;
  }

    /**
   * Returns n star numbers.
   * https://en.wikipedia.org/wiki/Star_number
   * 1, 13, 37, 73, 121, 181, 253, 337, 433, 541...
   * @param n 
   */
  public static star(n: number): number[] {
    if (typeof n !== 'number' || n < 1) {
      return [];
    } 
    let sequence = [];   
    for(let i = 1; i <= n; i++) {
      sequence.push(6*i*i - 6*i + 1);
    }
    return sequence;
  }

/**
 * The lazy caterer's sequence, more formally known as the central polygonal numbers, 
 * describes the maximum number of pieces of a disk that can be made with a given number of straight cuts.
 * https://en.wikipedia.org/wiki/Lazy_caterer%27s_sequence
 * 1, 2, 4, 7, 11, 16, 22, 29, 37, 46...
 * @param n
 */
public static lazyCatererar(n: number): number[] {
  if (typeof n !== 'number' || n < 1) {
    return [];
  } 
  let sequence = [];   
  for(let i = 0; i < n; i++) {
    sequence.push((i * i + i + 2) / 2);
  }
  return sequence;
}

  /**
   * Returns n numbers from the Fibonacci sequence.
   * The Fibonacci numbers, commonly denoted Fn, form a sequence, called the Fibonacci sequence, 
   * such that each number is the sum of the two preceding ones, starting from 0 and 1
   * 0, 1, 1, 2, 3, 5, 8, 13, 21, 34...
   *    
   * THIS SEQUENSE REACHES MAX_SAFE_INTEGER AT n > 79 
   * 
   * @param n Integer less than 80
   */
  public static fibonacci(n: number): number[] {
    if (typeof n !== 'number' || n < 1) {
      return [];
    }
    if (n === 1) { 
      return [0];
    }
    if (n > 79) {
      console.error('Fibonacci numbers above 79 are too high for normal integers, a bigint implementation is needed');
      return [];
    }
    const sequence = [0, 1];
    for(let i = 2; i < n; i++) {
      sequence.push(sequence[i-2] + sequence[i-1]);
    }
    return sequence;
  }

  /**
   * Returns n prime numbers
   * A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.
   * 2, 3, 5, 7, 11, 13, 17, 19, 23, 29...
   * @param n 
   */
  public static prime(n: number): number[] {
    if (typeof n !== 'number' || n < 1) {
      return [];
    }
    let sequence = [2];
    let candidate = 3;
    while (sequence.length < n)
    {
      if (sequence.some(prime => candidate % prime === 0) === false) {
        sequence.push(candidate);
      }
      candidate++;
    }
    return sequence;
  }

  /**
   * Returns n composite numbers
   * A composite number is a positive integer that can be formed by multiplying two smaller positive integers. 
   * Equivalently, it is a positive integer that has at least one divisor other than 1 and itself.
   * 4, 6, 8, 9, 10, 12, 14, 15, 16, 18...
   * @param n 
   */
  public static composite(n: number): number[] {
    if (typeof n !== 'number' || n < 1) {
      return [];
    }
    let primes = [2]
    let sequence = [];
    let candidate = 3;
    while (sequence.length < n)
    {
      if (primes.some(prime => candidate % prime === 0)) {
        sequence.push(candidate);
      } else {
        primes.push(candidate);
      }
      candidate++;
    }
    return sequence;
  }
}

export class Tools {
  public static stats = {
    en: {
      unigram: {A:8.167,B:1.492,C:2.782,D:4.253,E:12.702,F:2.228,G:2.015,H:6.094,I:6.966,J:0.153,K:0.772,L:4.025,M:2.406,N:6.749,O:7.507,P:1.929,Q:0.095,R:5.987,S:6.327,T:9.056,U:2.758,V:0.978,W:2.360,X:0.150,Y:1.974,Z:0.074},
      bigram: {TH:2.9,HE:2.48,IN:1.87,ER:1.73,AN:1.65,RE:1.38,ES:1.35,ST:1.19,ON:1.17,ND:1.14,EN:1.13,AT:1.08,NT:1.08,ED:1.04,EA:1.01,TO:1,OR:0.96,TI:0.96,HA:0.94,AR:0.89,NG:0.89,IS:0.89,IT:0.88,TE:0.88,OU:0.85,ET:0.84,OF:0.82,AL:0.82,AS:0.8,LE:0.74,SE:0.73,HI:0.72,SA:0.68,RA:0.64,RO:0.64,NE:0.64,VE:0.63,ME:0.62,RI:0.62,SO:0.6,DE:0.59,LL:0.58,TA:0.58,LI:0.57,SI:0.57,EL:0.55,EC:0.52,CO:0.52,NO:0.52,OT:0.51,MA:0.5,DI:0.5,IC:0.49,LA:0.49,HO:0.49,OM:0.48,TT:0.48,NA:0.48,SH:0.47,CH:0.46,BE:0.46,SS:0.46,RT:0.46,EE:0.45,EM:0.45,NS:0.44,RS:0.44,CE:0.43,UR:0.42,EI:0.41,CA:0.41,IO:0.41,AC:0.4,TS:0.4,DA:0.39,LO:0.39,US:0.39,WA:0.38,NI:0.38,DT:0.38,PE:0.38,FO:0.38,EW:0.37,UT:0.37,WI:0.36,IL:0.36,EO:0.36,LY:0.36,WH:0.36,AD:0.35,UN:0.34,OW:0.34,TR:0.34,NC:0.33,FT:0.33,DO:0.32,GE:0.32,EP:0.32,MO:0.32,WE:0.31},
      bigramBottom: ['CJ','VG','MJ','JT','PJ','WG','VH','BK','VV','JD','TQ','VB','JF','DZ','XB','JB','ZC','FJ','YY','QN','XS','QR','JK','JV','QQ','XN','VF','PX','ZD','QT','ZP','QO','DX','HJ','GV','JW','QC','JY','GJ','QB','PQ','JG','BZ','MX','QM','MZ','QF','WJ','ZQ','XR','ZK','CX','FX','FV','BX','VW','VJ','MQ','QV','ZF','QE','YJ','GX','KX','XG','QD','XJ','SX','VZ','VX','WV','YQ','BQ','GQ','VK','ZJ','XK','QP','HX','FZ','QH','QJ','JZ','VQ','KQ','XD','QW','JX','QX','KZ','WX','FQ','XZ','ZX','JQ','QG','QK','QY','QZ','WQ','WZ'],
      commonWords: ['A','ABANDON','ABILITY','ABLE','ABORTION','ABOUT','ABOVE','ABROAD','ABSENCE','ABSOLUTE','ABSOLUTELY','ABSORB','ABUSE','ACADEMIC','ACCEPT','ACCESS','ACCIDENT','ACCOMPANY','ACCOMPLISH','ACCORDING','ACCOUNT','ACCURATE','ACCUSE','ACHIEVE','ACHIEVEMENT','ACID','ACKNOWLEDGE','ACQUIRE','ACROSS','ACT','ACTION','ACTIVE','ACTIVIST','ACTIVITY','ACTOR','ACTRESS','ACTUAL','ACTUALLY','AD','ADAPT','ADD','ADDITION','ADDITIONAL','ADDRESS','ADEQUATE','ADJUST','ADJUSTMENT','ADMINISTRATION','ADMINISTRATOR','ADMIRE','ADMISSION','ADMIT','ADOLESCENT','ADOPT','ADULT','ADVANCE','ADVANCED','ADVANTAGE','ADVENTURE','ADVERTISING','ADVICE','ADVISE','ADVISER','ADVOCATE','AFFAIR','AFFECT','AFFORD','AFRAID','AFRICAN','AFRICAN-AMERICAN','AFTER','AFTERNOON','AGAIN','AGAINST','AGE','AGENCY','AGENDA','AGENT','AGGRESSIVE','AGO','AGREE','AGREEMENT','AGRICULTURAL','AH','AHEAD','AID','AIDE','AIDS','AIM','AIR','AIRCRAFT','AIRLINE','AIRPORT','ALBUM','ALCOHOL','ALIVE','ALL','ALLIANCE','ALLOW','ALLY','ALMOST','ALONE','ALONG','ALREADY','ALSO','ALTER','ALTERNATIVE','ALTHOUGH','ALWAYS','AM','AMAZING','AMERICAN','AMONG','AMOUNT','ANALYSIS','ANALYST','ANALYZE','ANCIENT','AND','ANGER','ANGLE','ANGRY','ANIMAL','ANNIVERSARY','ANNOUNCE','ANNUAL','ANOTHER','ANSWER','ANTICIPATE','ANXIETY','ANY','ANYBODY','ANYMORE','ANYONE','ANYTHING','ANYWAY','ANYWHERE','APART','APARTMENT','APPARENT','APPARENTLY','APPEAL','APPEAR','APPEARANCE','APPLE','APPLICATION','APPLY','APPOINT','APPOINTMENT','APPRECIATE','APPROACH','APPROPRIATE','APPROVAL','APPROVE','APPROXIMATELY','ARAB','ARCHITECT','AREA','ARGUE','ARGUMENT','ARISE','ARM','ARMED','ARMY','AROUND','ARRANGE','ARRANGEMENT','ARREST','ARRIVAL','ARRIVE','ART','ARTICLE','ARTIST','ARTISTIC','AS','ASIAN','ASIDE','ASK','ASLEEP','ASPECT','ASSAULT','ASSERT','ASSESS','ASSESSMENT','ASSET','ASSIGN','ASSIGNMENT','ASSIST','ASSISTANCE','ASSISTANT','ASSOCIATE','ASSOCIATION','ASSUME','ASSUMPTION','ASSURE','AT','ATHLETE','ATHLETIC','ATMOSPHERE','ATTACH','ATTACK','ATTEMPT','ATTEND','ATTENTION','ATTITUDE','ATTORNEY','ATTRACT','ATTRACTIVE','ATTRIBUTE','AUDIENCE','AUTHOR','AUTHORITY','AUTO','AVAILABLE','AVERAGE','AVOID','AWARD','AWARE','AWARENESS','AWAY','AWFUL','BABY','BACK','BACKGROUND','BAD','BADLY','BAG','BAKE','BALANCE','BALL','BAN','BAND','BANK','BAR','BARELY','BARREL','BARRIER','BASE','BASEBALL','BASIC','BASICALLY','BASIS','BASKET','BASKETBALL','BATHROOM','BATTERY','BATTLE','BE','BEACH','BEAN','BEAR','BEAT','BEAUTIFUL','BEAUTY','BECAUSE','BECOME','BED','BEDROOM','BEER','BEFORE','BEGIN','BEGINNING','BEHAVIOR','BEHIND','BEING','BELIEF','BELIEVE','BELL','BELONG','BELOW','BELT','BENCH','BEND','BENEATH','BENEFIT','BESIDE','BESIDES','BEST','BET','BETTER','BETWEEN','BEYOND','BIBLE','BIG','BIKE','BILL','BILLION','BIND','BIOLOGICAL','BIRD','BIRTH','BIRTHDAY','BIT','BITE','BLACK','BLADE','BLAME','BLANKET','BLIND','BLOCK','BLOOD','BLOW','BLUE','BOARD','BOAT','BODY','BOMB','BOMBING','BOND','BONE','BOOK','BOOM','BOOT','BORDER','BORN','BORROW','BOSS','BOTH','BOTHER','BOTTLE','BOTTOM','BOUNDARY','BOWL','BOX','BOY','BOYFRIEND','BRAIN','BRANCH','BRAND','BREAD','BREAK','BREAKFAST','BREAST','BREATH','BREATHE','BRICK','BRIDGE','BRIEF','BRIEFLY','BRIGHT','BRILLIANT','BRING','BRITISH','BROAD','BROKEN','BROTHER','BROWN','BRUSH','BUCK','BUDGET','BUILD','BUILDING','BULLET','BUNCH','BURDEN','BURN','BURY','BUS','BUSINESS','BUSY','BUT','BUTTER','BUTTON','BUY','BUYER','BY','CABIN','CABINET','CABLE','CAKE','CALCULATE','CALL','CAMERA','CAMP','CAMPAIGN','CAMPUS','CAN','CANADIAN','CANCER','CANDIDATE','CAP','CAPABILITY','CAPABLE','CAPACITY','CAPITAL','CAPTAIN','CAPTURE','CAR','CARBON','CARD','CARE','CAREER','CAREFUL','CAREFULLY','CARRIER','CARRY','CASE','CASH','CAST','CAT','CATCH','CATEGORY','CATHOLIC','CAUSE','CEILING','CELEBRATE','CELEBRATION','CELEBRITY','CELL','CENTER','CENTRAL','CENTURY','CEO','CEREMONY','CERTAIN','CERTAINLY','CHAIN','CHAIR','CHAIRMAN','CHALLENGE','CHAMBER','CHAMPION','CHAMPIONSHIP','CHANCE','CHANGE','CHANGING','CHANNEL','CHAPTER','CHARACTER','CHARACTERISTIC','CHARACTERIZE','CHARGE','CHARITY','CHART','CHASE','CHEAP','CHECK','CHEEK','CHEESE','CHEF','CHEMICAL','CHEST','CHICKEN','CHIEF','CHILD','CHILDHOOD','CHINESE','CHIP','CHOCOLATE','CHOICE','CHOLESTEROL','CHOOSE','CHRISTIAN','CHRISTMAS','CHURCH','CIGARETTE','CIRCLE','CIRCUMSTANCE','CITE','CITIZEN','CITY','CIVIL','CIVILIAN','CLAIM','CLASS','CLASSIC','CLASSROOM','CLEAN','CLEAR','CLEARLY','CLIENT','CLIMATE','CLIMB','CLINIC','CLINICAL','CLOCK','CLOSE','CLOSELY','CLOSER','CLOTHES','CLOTHING','CLOUD','CLUB','CLUE','CLUSTER','COACH','COAL','COALITION','COAST','COAT','CODE','COFFEE','COGNITIVE','COLD','COLLAPSE','COLLEAGUE','COLLECT','COLLECTION','COLLECTIVE','COLLEGE','COLONIAL','COLOR','COLUMN','COMBINATION','COMBINE','COME','COMEDY','COMFORT','COMFORTABLE','COMMAND','COMMANDER','COMMENT','COMMERCIAL','COMMISSION','COMMIT','COMMITMENT','COMMITTEE','COMMON','COMMUNICATE','COMMUNICATION','COMMUNITY','COMPANY','COMPARE','COMPARISON','COMPETE','COMPETITION','COMPETITIVE','COMPETITOR','COMPLAIN','COMPLAINT','COMPLETE','COMPLETELY','COMPLEX','COMPLICATED','COMPONENT','COMPOSE','COMPOSITION','COMPREHENSIVE','COMPUTER','CONCENTRATE','CONCENTRATION','CONCEPT','CONCERN','CONCERNED','CONCERT','CONCLUDE','CONCLUSION','CONCRETE','CONDITION','CONDUCT','CONFERENCE','CONFIDENCE','CONFIDENT','CONFIRM','CONFLICT','CONFRONT','CONFUSION','CONGRESS','CONGRESSIONAL','CONNECT','CONNECTION','CONSCIOUSNESS','CONSENSUS','CONSEQUENCE','CONSERVATIVE','CONSIDER','CONSIDERABLE','CONSIDERATION','CONSIST','CONSISTENT','CONSTANT','CONSTANTLY','CONSTITUTE','CONSTITUTIONAL','CONSTRUCT','CONSTRUCTION','CONSULTANT','CONSUME','CONSUMER','CONSUMPTION','CONTACT','CONTAIN','CONTAINER','CONTEMPORARY','CONTENT','CONTEST','CONTEXT','CONTINUE','CONTINUED','CONTRACT','CONTRAST','CONTRIBUTE','CONTRIBUTION','CONTROL','CONTROVERSIAL','CONTROVERSY','CONVENTION','CONVENTIONAL','CONVERSATION','CONVERT','CONVICTION','CONVINCE','COOK','COOKIE','COOKING','COOL','COOPERATION','COP','COPE','COPY','CORE','CORN','CORNER','CORPORATE','CORPORATION','CORRECT','CORRESPONDENT','COST','COTTON','COUCH','COULD','COUNCIL','COUNSELOR','COUNT','COUNTER','COUNTRY','COUNTY','COUPLE','COURAGE','COURSE','COURT','COUSIN','COVER','COVERAGE','COW','CRACK','CRAFT','CRASH','CRAZY','CREAM','CREATE','CREATION','CREATIVE','CREATURE','CREDIT','CREW','CRIME','CRIMINAL','CRISIS','CRITERIA','CRITIC','CRITICAL','CRITICISM','CRITICIZE','CROP','CROSS','CROWD','CRUCIAL','CRY','CULTURAL','CULTURE','CUP','CURIOUS','CURRENT','CURRENTLY','CURRICULUM','CUSTOM','CUSTOMER','CUT','CYCLE','DAD','DAILY','DAMAGE','DANCE','DANGER','DANGEROUS','DARE','DARK','DARKNESS','DATA','DATE','DAUGHTER','DAY','DEAD','DEAL','DEALER','DEAR','DEATH','DEBATE','DEBT','DECADE','DECIDE','DECISION','DECK','DECLARE','DECLINE','DECREASE','DEEP','DEEPLY','DEER','DEFEAT','DEFEND','DEFENDANT','DEFENSE','DEFENSIVE','DEFICIT','DEFINE','DEFINITELY','DEFINITION','DEGREE','DELAY','DELIVER','DELIVERY','DEMAND','DEMOCRACY','DEMOCRAT','DEMOCRATIC','DEMONSTRATE','DEMONSTRATION','DENY','DEPARTMENT','DEPEND','DEPENDENT','DEPENDING','DEPICT','DEPRESSION','DEPTH','DEPUTY','DERIVE','DESCRIBE','DESCRIPTION','DESERT','DESERVE','DESIGN','DESIGNER','DESIRE','DESK','DESPERATE','DESPITE','DESTROY','DESTRUCTION','DETAIL','DETAILED','DETECT','DETERMINE','DEVELOP','DEVELOPING','DEVELOPMENT','DEVICE','DEVOTE','DIALOGUE','DIE','DIET','DIFFER','DIFFERENCE','DIFFERENT','DIFFERENTLY','DIFFICULT','DIFFICULTY','DIG','DIGITAL','DIMENSION','DINING','DINNER','DIRECT','DIRECTION','DIRECTLY','DIRECTOR','DIRT','DIRTY','DISABILITY','DISAGREE','DISAPPEAR','DISASTER','DISCIPLINE','DISCOURSE','DISCOVER','DISCOVERY','DISCRIMINATION','DISCUSS','DISCUSSION','DISEASE','DISH','DISMISS','DISORDER','DISPLAY','DISPUTE','DISTANCE','DISTANT','DISTINCT','DISTINCTION','DISTINGUISH','DISTRIBUTE','DISTRIBUTION','DISTRICT','DIVERSE','DIVERSITY','DIVIDE','DIVISION','DIVORCE','DNA','DO','DOCTOR','DOCUMENT','DOG','DOMESTIC','DOMINANT','DOMINATE','DOOR','DOUBLE','DOUBT','DOWN','DOWNTOWN','DOZEN','DRAFT','DRAG','DRAMA','DRAMATIC','DRAMATICALLY','DRAW','DRAWING','DREAM','DRESS','DRINK','DRIVE','DRIVER','DROP','DRUG','DRY','DUE','DURING','DUST','DUTY','EACH','EAGER','EAR','EARLY','EARN','EARNINGS','EARTH','EASE','EASILY','EAST','EASTERN','EASY','EAT','ECONOMIC','ECONOMICS','ECONOMIST','ECONOMY','EDGE','EDITION','EDITOR','EDUCATE','EDUCATION','EDUCATIONAL','EDUCATOR','EFFECT','EFFECTIVE','EFFECTIVELY','EFFICIENCY','EFFICIENT','EFFORT','EGG','EIGHT','EITHER','ELDERLY','ELECT','ELECTION','ELECTRIC','ELECTRICITY','ELECTRONIC','ELEMENT','ELEMENTARY','ELIMINATE','ELITE','ELSE','ELSEWHERE','E-MAIL','EMBRACE','EMERGE','EMERGENCY','EMISSION','EMOTION','EMOTIONAL','EMPHASIS','EMPHASIZE','EMPLOY','EMPLOYEE','EMPLOYER','EMPLOYMENT','EMPTY','ENABLE','ENCOUNTER','ENCOURAGE','END','ENEMY','ENERGY','ENFORCEMENT','ENGAGE','ENGINE','ENGINEER','ENGINEERING','ENGLISH','ENHANCE','ENJOY','ENORMOUS','ENOUGH','ENSURE','ENTER','ENTERPRISE','ENTERTAINMENT','ENTIRE','ENTIRELY','ENTRANCE','ENTRY','ENVIRONMENT','ENVIRONMENTAL','EPISODE','EQUAL','EQUALLY','EQUIPMENT','ERA','ERROR','ESCAPE','ESPECIALLY','ESSAY','ESSENTIAL','ESSENTIALLY','ESTABLISH','ESTABLISHMENT','ESTATE','ESTIMATE','ETC','ETHICS','ETHNIC','EUROPEAN','EVALUATE','EVALUATION','EVEN','EVENING','EVENT','EVENTUALLY','EVER','EVERY','EVERYBODY','EVERYDAY','EVERYONE','EVERYTHING','EVERYWHERE','EVIDENCE','EVOLUTION','EVOLVE','EXACT','EXACTLY','EXAMINATION','EXAMINE','EXAMPLE','EXCEED','EXCELLENT','EXCEPT','EXCEPTION','EXCHANGE','EXCITING','EXECUTIVE','EXERCISE','EXHIBIT','EXHIBITION','EXIST','EXISTENCE','EXISTING','EXPAND','EXPANSION','EXPECT','EXPECTATION','EXPENSE','EXPENSIVE','EXPERIENCE','EXPERIMENT','EXPERT','EXPLAIN','EXPLANATION','EXPLODE','EXPLORE','EXPLOSION','EXPOSE','EXPOSURE','EXPRESS','EXPRESSION','EXTEND','EXTENSION','EXTENSIVE','EXTENT','EXTERNAL','EXTRA','EXTRAORDINARY','EXTREME','EXTREMELY','EYE','FABRIC','FACE','FACILITY','FACT','FACTOR','FACTORY','FACULTY','FADE','FAIL','FAILURE','FAIR','FAIRLY','FAITH','FALL','FALSE','FAMILIAR','FAMILY','FAMOUS','FAN','FANTASY','FAR','FARM','FARMER','FASHION','FAST','FAT','FATE','FATHER','FAULT','FAVOR','FAVORITE','FEAR','FEATURE','FEDERAL','FEE','FEED','FEEL','FEELING','FELLOW','FEMALE','FENCE','FEW','FEWER','FIBER','FICTION','FIELD','FIFTEEN','FIFTH','FIFTY','FIGHT','FIGHTER','FIGHTING','FIGURE','FILE','FILL','FILM','FINAL','FINALLY','FINANCE','FINANCIAL','FIND','FINDING','FINE','FINGER','FINISH','FIRE','FIRM','FIRST','FISH','FISHING','FIT','FITNESS','FIVE','FIX','FLAG','FLAME','FLAT','FLAVOR','FLEE','FLESH','FLIGHT','FLOAT','FLOOR','FLOW','FLOWER','FLY','FOCUS','FOLK','FOLLOW','FOLLOWING','FOOD','FOOT','FOOTBALL','FOR','FORCE','FOREIGN','FOREST','FOREVER','FORGET','FORM','FORMAL','FORMATION','FORMER','FORMULA','FORTH','FORTUNE','FORWARD','FOUND','FOUNDATION','FOUNDER','FOUR','FOURTH','FRAME','FRAMEWORK','FREE','FREEDOM','FREEZE','FRENCH','FREQUENCY','FREQUENT','FREQUENTLY','FRESH','FRIEND','FRIENDLY','FRIENDSHIP','FROM','FRONT','FRUIT','FRUSTRATION','FUEL','FULL','FULLY','FUN','FUNCTION','FUND','FUNDAMENTAL','FUNDING','FUNERAL','FUNNY','FURNITURE','FURTHERMORE','FUTURE','GAIN','GALAXY','GALLERY','GAME','GANG','GAP','GARAGE','GARDEN','GARLIC','GAS','GATE','GATHER','GAY','GAZE','GEAR','GENDER','GENE','GENERAL','GENERALLY','GENERATE','GENERATION','GENETIC','GENTLEMAN','GENTLY','GERMAN','GESTURE','GET','GHOST','GIANT','GIFT','GIFTED','GIRL','GIRLFRIEND','GIVE','GIVEN','GLAD','GLANCE','GLASS','GLOBAL','GLOVE','GO','GOAL','GOD','GOLD','GOLDEN','GOLF','GOOD','GOVERNMENT','GOVERNOR','GRAB','GRADE','GRADUALLY','GRADUATE','GRAIN','GRAND','GRANDFATHER','GRANDMOTHER','GRANT','GRASS','GRAVE','GRAY','GREAT','GREATEST','GREEN','GROCERY','GROUND','GROUP','GROW','GROWING','GROWTH','GUARANTEE','GUARD','GUESS','GUEST','GUIDE','GUIDELINE','GUILTY','GUN','GUY','HABIT','HABITAT','HAIR','HALF','HALL','HAND','HANDFUL','HANDLE','HANG','HAPPEN','HAPPY','HARD','HARDLY','HAT','HATE','HAVE','HE','HEAD','HEADLINE','HEADQUARTERS','HEALTH','HEALTHY','HEAR','HEARING','HEART','HEAT','HEAVEN','HEAVILY','HEAVY','HEEL','HEIGHT','HELICOPTER','HELL','HELLO','HELP','HELPFUL','HER','HERE','HERITAGE','HERO','HERSELF','HEY','HI','HIDE','HIGH','HIGHLIGHT','HIGHLY','HIGHWAY','HILL','HIM','HIMSELF','HIP','HIRE','HIS','HISTORIAN','HISTORIC','HISTORICAL','HISTORY','HIT','HOLD','HOLE','HOLIDAY','HOLY','HOME','HOMELESS','HONEST','HONEY','HONOR','HOPE','HORIZON','HORROR','HORSE','HOSPITAL','HOST','HOT','HOTEL','HOUR','HOUSE','HOUSEHOLD','HOUSING','HOW','HOWEVER','HUGE','HUMAN','HUMOR','HUNDRED','HUNGRY','HUNTER','HUNTING','HURT','HUSBAND','HYPOTHESIS','I','ICE','IDEA','IDEAL','IDENTIFICATION','IDENTIFY','IDENTITY','IE','IF','IGNORE','ILL','ILLEGAL','ILLNESS','ILLUSTRATE','IMAGE','IMAGINATION','IMAGINE','IMMEDIATE','IMMEDIATELY','IMMIGRANT','IMMIGRATION','IMPACT','IMPLEMENT','IMPLICATION','IMPLY','IMPORTANCE','IMPORTANT','IMPOSE','IMPOSSIBLE','IMPRESS','IMPRESSION','IMPRESSIVE','IMPROVE','IMPROVEMENT','IN','INCENTIVE','INCIDENT','INCLUDE','INCLUDING','INCOME','INCORPORATE','INCREASE','INCREASED','INCREASING','INCREASINGLY','INCREDIBLE','INDEED','INDEPENDENCE','INDEPENDENT','INDEX','INDIAN','INDICATE','INDICATION','INDIVIDUAL','INDUSTRIAL','INDUSTRY','INFANT','INFECTION','INFLATION','INFLUENCE','INFORM','INFORMATION','INGREDIENT','INITIAL','INITIALLY','INITIATIVE','INJURY','INNER','INNOCENT','INQUIRY','INSIDE','INSIGHT','INSIST','INSPIRE','INSTALL','INSTANCE','INSTEAD','INSTITUTION','INSTITUTIONAL','INSTRUCTION','INSTRUCTOR','INSTRUMENT','INSURANCE','INTELLECTUAL','INTELLIGENCE','INTEND','INTENSE','INTENSITY','INTENTION','INTERACTION','INTEREST','INTERESTED','INTERESTING','INTERNAL','INTERNATIONAL','INTERNET','INTERPRET','INTERPRETATION','INTERVENTION','INTERVIEW','INTO','INTRODUCE','INTRODUCTION','INVASION','INVEST','INVESTIGATE','INVESTIGATION','INVESTIGATOR','INVESTMENT','INVESTOR','INVITE','INVOLVE','INVOLVED','INVOLVEMENT','IRAQI','IRISH','IRON','IS','ISLAMIC','ISLAND','ISRAELI','ISSUE','IT','ITALIAN','ITEM','ITS','ITSELF','JACKET','JAIL','JAPANESE','JET','JEW','JEWISH','JOB','JOIN','JOINT','JOKE','JOURNAL','JOURNALIST','JOURNEY','JOY','JUDGE','JUDGMENT','JUICE','JUMP','JUNIOR','JURY','JUST','JUSTICE','JUSTIFY','KEEP','KEY','KICK','KID','KILL','KILLER','KILLING','KIND','KING','KISS','KITCHEN','KNEE','KNIFE','KNOCK','KNOW','KNOWLEDGE','LAB','LABEL','LABOR','LABORATORY','LACK','LADY','LAKE','LAND','LANDSCAPE','LANGUAGE','LAP','LARGE','LARGELY','LAST','LATE','LATER','LATIN','LATTER','LAUGH','LAUNCH','LAW','LAWN','LAWSUIT','LAWYER','LAY','LAYER','LEAD','LEADER','LEADERSHIP','LEADING','LEAF','LEAGUE','LEAN','LEARN','LEARNING','LEAST','LEATHER','LEAVE','LEFT','LEG','LEGACY','LEGAL','LEGEND','LEGISLATION','LEGITIMATE','LEMON','LENGTH','LESS','LESSON','LET','LETTER','LEVEL','LIBERAL','LIBRARY','LICENSE','LIE','LIFE','LIFESTYLE','LIFETIME','LIFT','LIGHT','LIKE','LIKELY','LIMIT','LIMITATION','LIMITED','LINE','LINK','LIP','LIST','LISTEN','LITERALLY','LITERARY','LITERATURE','LITTLE','LIVE','LIVING','LOAD','LOAN','LOCAL','LOCATE','LOCATION','LOCK','LONG','LONG-TERM','LOOK','LOOSE','LOSE','LOSS','LOST','LOT','LOTS','LOUD','LOVE','LOVELY','LOVER','LOW','LOWER','LUCK','LUCKY','LUNCH','LUNG','MACHINE','MAD','MAGAZINE','MAIL','MAIN','MAINLY','MAINTAIN','MAINTENANCE','MAJOR','MAJORITY','MAKE','MAKER','MAKEUP','MALE','MALL','MAN','MANAGE','MANAGEMENT','MANAGER','MANNER','MANUFACTURER','MANUFACTURING','MANY','MAP','MARGIN','MARK','MARKET','MARKETING','MARRIAGE','MARRIED','MARRY','MASK','MASS','MASSIVE','MASTER','MATCH','MATERIAL','MATH','MATTER','MAY','MAYBE','MAYOR','ME','MEAL','MEAN','MEANING','MEANWHILE','MEASURE','MEASUREMENT','MEAT','MECHANISM','MEDIA','MEDICAL','MEDICATION','MEDICINE','MEDIUM','MEET','MEETING','MEMBER','MEMBERSHIP','MEMORY','MENTAL','MENTION','MENU','MERE','MERELY','MESS','MESSAGE','METAL','METER','METHOD','MEXICAN','MIDDLE','MIGHT','MILITARY','MILK','MILLION','MIND','MINE','MINISTER','MINOR','MINORITY','MINUTE','MIRACLE','MIRROR','MISS','MISSILE','MISSION','MISTAKE','MIX','MIXTURE','MM-HMM','MODE','MODEL','MODERATE','MODERN','MODEST','MOM','MOMENT','MONEY','MONITOR','MONTH','MOOD','MOON','MORAL','MORE','MOREOVER','MORNING','MORTGAGE','MOST','MOSTLY','MOTHER','MOTION','MOTIVATION','MOTOR','MOUNT','MOUNTAIN','MOUSE','MOUTH','MOVE','MOVEMENT','MOVIE','MR','MRS','MS','MUCH','MULTIPLE','MURDER','MUSCLE','MUSEUM','MUSIC','MUSICAL','MUSICIAN','MUSLIM','MUST','MUTUAL','MY','MYSELF','MYSTERY','MYTH','NAKED','NAME','NARRATIVE','NARROW','NATION','NATIONAL','NATIVE','NATURAL','NATURALLY','NATURE','NEAR','NEARBY','NEARLY','NECESSARILY','NECESSARY','NECK','NEED','NEGATIVE','NEGOTIATE','NEGOTIATION','NEIGHBOR','NEIGHBORHOOD','NEITHER','NERVE','NERVOUS','NET','NETWORK','NEVER','NEVERTHELESS','NEW','NEWLY','NEWS','NEWSPAPER','NEXT','NICE','NIGHT','NINE','NO','NOBODY','NOD','NOISE','NOMINATION','NONE','NONETHELESS','NOR','NORMAL','NORMALLY','NORTH','NORTHERN','NOSE','NOT','NOTE','NOTHING','NOTICE','NOTION','NOVEL','NOW','NOWHERE','NUCLEAR','NUMBER','NUMEROUS','NURSE','NUT','OBJECT','OBJECTIVE','OBLIGATION','OBSERVATION','OBSERVE','OBSERVER','OBTAIN','OBVIOUS','OBVIOUSLY','OCCASION','OCCASIONALLY','OCCUPATION','OCCUPY','OCCUR','OCEAN','ODD','ODDS','OF','OFF','OFFENSE','OFFENSIVE','OFFER','OFFICE','OFFICER','OFFICIAL','OFTEN','OH','OIL','OK','OKAY','OLD','OLYMPIC','ON','ONCE','ONE','ONGOING','ONION','ONLINE','ONLY','ONTO','OPEN','OPENING','OPERATE','OPERATING','OPERATION','OPERATOR','OPINION','OPPONENT','OPPORTUNITY','OPPOSE','OPPOSITE','OPPOSITION','OPTION','OR','ORANGE','ORDER','ORDINARY','ORGANIC','ORGANIZATION','ORGANIZE','ORIENTATION','ORIGIN','ORIGINAL','ORIGINALLY','OTHER','OTHERS','OTHERWISE','OUGHT','OUR','OURSELVES','OUT','OUTCOME','OUTSIDE','OVEN','OVER','OVERALL','OVERCOME','OVERLOOK','OWE','OWN','OWNER','PACE','PACK','PACKAGE','PAGE','PAIN','PAINFUL','PAINT','PAINTER','PAINTING','PAIR','PALE','PALESTINIAN','PALM','PAN','PANEL','PANT','PAPER','PARENT','PARK','PARKING','PART','PARTICIPANT','PARTICIPATE','PARTICIPATION','PARTICULAR','PARTICULARLY','PARTLY','PARTNER','PARTNERSHIP','PARTY','PASS','PASSAGE','PASSENGER','PASSION','PAST','PATCH','PATH','PATIENT','PATTERN','PAUSE','PAY','PAYMENT','PC','PEACE','PEAK','PEER','PENALTY','PEOPLE','PEPPER','PER','PERCEIVE','PERCENTAGE','PERCEPTION','PERFECT','PERFECTLY','PERFORM','PERFORMANCE','PERHAPS','PERIOD','PERMANENT','PERMISSION','PERMIT','PERSON','PERSONAL','PERSONALITY','PERSONALLY','PERSONNEL','PERSPECTIVE','PERSUADE','PET','PHASE','PHENOMENON','PHILOSOPHY','PHONE','PHOTO','PHOTOGRAPH','PHOTOGRAPHER','PHRASE','PHYSICAL','PHYSICALLY','PHYSICIAN','PIANO','PICK','PICTURE','PIE','PIECE','PILE','PILOT','PINE','PINK','PIPE','PITCH','PLACE','PLAN','PLANE','PLANET','PLANNING','PLANT','PLASTIC','PLATE','PLATFORM','PLAY','PLAYER','PLEASE','PLEASURE','PLENTY','PLOT','PLUS','PM','POCKET','POEM','POET','POETRY','POINT','POLE','POLICE','POLICY','POLITICAL','POLITICALLY','POLITICIAN','POLITICS','POLL','POLLUTION','POOL','POOR','POP','POPULAR','POPULATION','PORCH','PORT','PORTION','PORTRAIT','PORTRAY','POSE','POSITION','POSITIVE','POSSESS','POSSIBILITY','POSSIBLE','POSSIBLY','POST','POT','POTATO','POTENTIAL','POTENTIALLY','POUND','POUR','POVERTY','POWDER','POWER','POWERFUL','PRACTICAL','PRACTICE','PRAY','PRAYER','PRECISELY','PREDICT','PREFER','PREFERENCE','PREGNANCY','PREGNANT','PREPARATION','PREPARE','PRESCRIPTION','PRESENCE','PRESENT','PRESENTATION','PRESERVE','PRESIDENT','PRESIDENTIAL','PRESS','PRESSURE','PRETEND','PRETTY','PREVENT','PREVIOUS','PREVIOUSLY','PRICE','PRIDE','PRIEST','PRIMARILY','PRIMARY','PRIME','PRINCIPAL','PRINCIPLE','PRINT','PRIOR','PRIORITY','PRISON','PRISONER','PRIVACY','PRIVATE','PROBABLY','PROBLEM','PROCEDURE','PROCEED','PROCESS','PRODUCE','PRODUCER','PRODUCT','PRODUCTION','PROFESSION','PROFESSIONAL','PROFESSOR','PROFILE','PROFIT','PROGRAM','PROGRESS','PROJECT','PROMINENT','PROMISE','PROMOTE','PROMPT','PROOF','PROPER','PROPERLY','PROPERTY','PROPORTION','PROPOSAL','PROPOSE','PROPOSED','PROSECUTOR','PROSPECT','PROTECT','PROTECTION','PROTEIN','PROTEST','PROUD','PROVE','PROVIDE','PROVIDER','PROVINCE','PROVISION','PSYCHOLOGICAL','PSYCHOLOGIST','PSYCHOLOGY','PUBLIC','PUBLICATION','PUBLICLY','PUBLISH','PUBLISHER','PULL','PUNISHMENT','PURCHASE','PURE','PURPOSE','PURSUE','PUSH','PUT','QUALIFY','QUALITY','QUARTER','QUARTERBACK','QUESTION','QUICK','QUICKLY','QUIET','QUIETLY','QUIT','QUITE','QUOTE','RACE','RACIAL','RADICAL','RADIO','RAIL','RAIN','RAISE','RANGE','RANK','RAPID','RAPIDLY','RARE','RARELY','RATE','RATHER','RATING','RATIO','RAW','REACH','REACT','REACTION','READ','READER','READING','READY','REAL','REALITY','REALIZE','REALLY','REASON','REASONABLE','RECALL','RECEIVE','RECENT','RECENTLY','RECIPE','RECOGNITION','RECOGNIZE','RECOMMEND','RECOMMENDATION','RECORD','RECORDING','RECOVER','RECOVERY','RECRUIT','RED','REDUCE','REDUCTION','REFER','REFERENCE','REFLECT','REFLECTION','REFORM','REFUGEE','REFUSE','REGARD','REGARDING','REGARDLESS','REGIME','REGION','REGIONAL','REGISTER','REGULAR','REGULARLY','REGULATE','REGULATION','REINFORCE','REJECT','RELATE','RELATION','RELATIONSHIP','RELATIVE','RELATIVELY','RELAX','RELEASE','RELEVANT','RELIEF','RELIGION','RELIGIOUS','RELY','REMAIN','REMAINING','REMARKABLE','REMEMBER','REMIND','REMOTE','REMOVE','REPEAT','REPEATEDLY','REPLACE','REPLY','REPORT','REPORTER','REPRESENT','REPRESENTATION','REPRESENTATIVE','REPUBLICAN','REPUTATION','REQUEST','REQUIRE','REQUIREMENT','RESEARCH','RESEARCHER','RESEMBLE','RESERVATION','RESIDENT','RESIST','RESISTANCE','RESOLUTION','RESOLVE','RESORT','RESOURCE','RESPECT','RESPOND','RESPONDENT','RESPONSE','RESPONSIBILITY','RESPONSIBLE','REST','RESTAURANT','RESTORE','RESTRICTION','RESULT','RETAIN','RETIRE','RETIREMENT','RETURN','REVEAL','REVENUE','REVIEW','REVOLUTION','RHYTHM','RICE','RICH','RID','RIDE','RIFLE','RIGHT','RING','RISE','RISK','RIVER','ROAD','ROCK','ROLE','ROLL','ROMANTIC','ROOF','ROOM','ROOT','ROPE','ROSE','ROUGH','ROUGHLY','ROUND','ROUTE','ROUTINE','ROW','RUB','RULE','RUN','RUNNING','RURAL','RUSH','RUSSIAN','SACRED','SAD','SAFE','SAFETY','SAKE','SALAD','SALARY','SALE','SALES','SALT','SAME','SAMPLE','SANCTION','SAND','SATELLITE','SATISFACTION','SATISFY','SAUCE','SAVE','SAVING','SAY','SCALE','SCANDAL','SCARED','SCENARIO','SCENE','SCHEDULE','SCHEME','SCHOLAR','SCHOLARSHIP','SCHOOL','SCIENCE','SCIENTIFIC','SCIENTIST','SCOPE','SCORE','SCREAM','SCREEN','SCRIPT','SEA','SEARCH','SEASON','SEAT','SECOND','SECRET','SECRETARY','SECTION','SECTOR','SECURE','SECURITY','SEE','SEED','SEEK','SEEM','SEGMENT','SEIZE','SELECT','SELECTION','SELF','SELL','SENATE','SENATOR','SEND','SENIOR','SENSE','SENSITIVE','SENTENCE','SEPARATE','SEQUENCE','SERIES','SERIOUS','SERIOUSLY','SERVE','SERVICE','SESSION','SET','SETTING','SETTLE','SETTLEMENT','SEVEN','SEVERAL','SEVERE','SEX','SEXUAL','SHADE','SHADOW','SHAKE','SHALL','SHAPE','SHARE','SHARP','SHE','SHEET','SHELF','SHELL','SHELTER','SHIFT','SHINE','SHIP','SHIRT','SHIT','SHOCK','SHOE','SHOOT','SHOOTING','SHOP','SHOPPING','SHORE','SHORT','SHORTLY','SHOT','SHOULD','SHOULDER','SHOUT','SHOW','SHOWER','SHRUG','SHUT','SICK','SIDE','SIGH','SIGHT','SIGN','SIGNAL','SIGNIFICANCE','SIGNIFICANT','SIGNIFICANTLY','SILENCE','SILENT','SILVER','SIMILAR','SIMILARLY','SIMPLE','SIMPLY','SIN','SINCE','SING','SINGER','SINGLE','SINK','SIR','SISTER','SIT','SITE','SITUATION','SIX','SIZE','SKI','SKILL','SKIN','SKY','SLAVE','SLEEP','SLICE','SLIDE','SLIGHT','SLIGHTLY','SLIP','SLOW','SLOWLY','SMALL','SMART','SMELL','SMILE','SMOKE','SMOOTH','SNAP','SNOW','SO','SO-CALLED','SOCCER','SOCIAL','SOCIETY','SOFT','SOFTWARE','SOIL','SOLAR','SOLDIER','SOLID','SOLUTION','SOLVE','SOME','SOMEBODY','SOMEHOW','SOMEONE','SOMETHING','SOMETIMES','SOMEWHAT','SOMEWHERE','SON','SONG','SOON','SOPHISTICATED','SORRY','SORT','SOUL','SOUND','SOUP','SOURCE','SOUTH','SOUTHERN','SOVIET','SPACE','SPANISH','SPEAK','SPEAKER','SPECIAL','SPECIALIST','SPECIES','SPECIFIC','SPECIFICALLY','SPEECH','SPEED','SPEND','SPENDING','SPIN','SPIRIT','SPIRITUAL','SPLIT','SPOKESMAN','SPORT','SPOT','SPREAD','SPRING','SQUARE','SQUEEZE','STABILITY','STABLE','STAFF','STAGE','STAIR','STAKE','STAND','STANDARD','STANDING','STAR','STARE','START','STATE','STATEMENT','STATION','STATISTICS','STATUS','STAY','STEADY','STEAL','STEEL','STEP','STICK','STILL','STIR','STOCK','STOMACH','STONE','STOP','STORAGE','STORE','STORM','STORY','STRAIGHT','STRANGE','STRANGER','STRATEGIC','STRATEGY','STREAM','STREET','STRENGTH','STRENGTHEN','STRESS','STRETCH','STRIKE','STRING','STRIP','STROKE','STRONG','STRONGLY','STRUCTURE','STRUGGLE','STUDENT','STUDIO','STUDY','STUFF','STUPID','STYLE','SUBJECT','SUBMIT','SUBSEQUENT','SUBSTANCE','SUBSTANTIAL','SUCCEED','SUCCESS','SUCCESSFUL','SUCCESSFULLY','SUCH','SUDDEN','SUDDENLY','SUE','SUFFER','SUFFICIENT','SUGAR','SUGGEST','SUGGESTION','SUICIDE','SUIT','SUMMER','SUMMIT','SUN','SUPER','SUPPLY','SUPPORT','SUPPORTER','SUPPOSE','SUPPOSED','SUPREME','SURE','SURELY','SURFACE','SURGERY','SURPRISE','SURPRISED','SURPRISING','SURPRISINGLY','SURROUND','SURVEY','SURVIVAL','SURVIVE','SURVIVOR','SUSPECT','SUSTAIN','SWEAR','SWEEP','SWEET','SWIM','SWING','SWITCH','SYMBOL','SYMPTOM','SYSTEM','TABLE','TABLESPOON','TACTIC','TAIL','TAKE','TALE','TALENT','TALK','TALL','TANK','TAP','TAPE','TARGET','TASK','TASTE','TAX','TAXPAYER','TEA','TEACH','TEACHER','TEACHING','TEAM','TEAR','TEASPOON','TECHNICAL','TECHNIQUE','TECHNOLOGY','TEEN','TEENAGER','TELEPHONE','TELESCOPE','TELEVISION','TELL','TEMPERATURE','TEMPORARY','TEN','TEND','TENDENCY','TENNIS','TENSION','TENT','TERM','TERMS','TERRIBLE','TERRITORY','TERROR','TERRORISM','TERRORIST','TEST','TESTIFY','TESTIMONY','TESTING','TEXT','THAN','THANK','THANKS','THAT','THE','THEATER','THEIR','THEM','THEME','THEMSELVES','THEN','THEORY','THERAPY','THERE','THEREFORE','THESE','THEY','THICK','THIN','THING','THINK','THINKING','THIRD','THIRTY','THIS','THOSE','THOUGH','THOUGHT','THOUSAND','THREAT','THREATEN','THREE','THROAT','THROUGH','THROUGHOUT','THROW','THUS','TICKET','TIE','TIGHT','TIME','TINY','TIP','TIRE','TIRED','TISSUE','TITLE','TO','TOBACCO','TODAY','TOE','TOGETHER','TOMATO','TOMORROW','TONE','TONGUE','TONIGHT','TOO','TOOL','TOOTH','TOP','TOPIC','TOSS','TOTAL','TOTALLY','TOUCH','TOUGH','TOUR','TOURIST','TOURNAMENT','TOWARD','TOWARDS','TOWER','TOWN','TOY','TRACE','TRACK','TRADE','TRADITION','TRADITIONAL','TRAFFIC','TRAGEDY','TRAIL','TRAIN','TRAINING','TRANSFER','TRANSFORM','TRANSFORMATION','TRANSITION','TRANSLATE','TRANSPORTATION','TRAVEL','TREAT','TREATMENT','TREATY','TREE','TREMENDOUS','TREND','TRIAL','TRIBE','TRICK','TRIP','TROOP','TROUBLE','TRUCK','TRUE','TRULY','TRUST','TRUTH','TRY','TUBE','TUNNEL','TURN','TV','TWELVE','TWENTY','TWICE','TWIN','TWO','TYPE','TYPICAL','TYPICALLY','UGLY','ULTIMATE','ULTIMATELY','UNABLE','UNCLE','UNDER','UNDERGO','UNDERSTAND','UNDERSTANDING','UNFORTUNATELY','UNIFORM','UNION','UNIQUE','UNIT','UNITED','UNIVERSAL','UNIVERSE','UNIVERSITY','UNKNOWN','UNLESS','UNLIKE','UNLIKELY','UNTIL','UNUSUAL','UP','UPON','UPPER','URBAN','URGE','US','USE','USED','USEFUL','USER','USUAL','USUALLY','UTILITY','VACATION','VALLEY','VALUABLE','VALUE','VARIABLE','VARIATION','VARIETY','VARIOUS','VARY','VAST','VEGETABLE','VEHICLE','VENTURE','VERSION','VERSUS','VERY','VESSEL','VETERAN','VIA','VICTIM','VICTORY','VIDEO','VIEW','VIEWER','VILLAGE','VIOLATE','VIOLATION','VIOLENCE','VIOLENT','VIRTUALLY','VIRTUE','VIRUS','VISIBLE','VISION','VISIT','VISITOR','VISUAL','VITAL','VOICE','VOLUME','VOLUNTEER','VOTE','VOTER','VS','VULNERABLE','WAGE','WAIT','WAKE','WALK','WALL','WANDER','WANT','WAR','WARM','WARN','WARNING','WASH','WASTE','WATCH','WATER','WAVE','WAY','WE','WEAK','WEALTH','WEALTHY','WEAPON','WEAR','WEATHER','WEDDING','WEEK','WEEKEND','WEEKLY','WEIGH','WEIGHT','WELCOME','WELFARE','WELL','WEST','WESTERN','WET','WHAT','WHATEVER','WHEEL','WHEN','WHENEVER','WHERE','WHEREAS','WHETHER','WHICH','WHILE','WHISPER','WHITE','WHO','WHOLE','WHOM','WHOSE','WHY','WIDE','WIDELY','WIDESPREAD','WIFE','WILD','WILL','WILLING','WIN','WIND','WINDOW','WINE','WING','WINNER','WINTER','WIPE','WIRE','WISDOM','WISE','WISH','WITH','WITHDRAW','WITHIN','WITHOUT','WITNESS','WOMAN','WONDER','WONDERFUL','WOOD','WOODEN','WORD','WORK','WORKER','WORKING','WORKS','WORKSHOP','WORLD','WORRIED','WORRY','WORTH','WOULD','WOUND','WRAP','WRITE','WRITER','WRITING','WRONG','YARD','YEAH','YEAR','YELL','YELLOW','YES','YESTERDAY','YET','YIELD','YOU','YOUNG','YOUR','YOURS','YOURSELF','YOUTH','ZONE']
    }
  }

  public static unigram(txt: string, alpha: string) {    
    const unigram = {};
    const chars = {}
    for (let i = 0; i < alpha.length; i++) {
      chars[alpha.charAt(i)] = 0;
      unigram[alpha.charAt(i)] = 0;
    }
    
    txt = txt.toUpperCase();
    for(let i = 0; i < txt.length; i++) {
      let c = txt.charAt(i)
      if(alpha.indexOf(c) != -1) {
        chars[c]++;
      }
    }
    let sum = 0;
    for(let i = 0; i < alpha.length; i++) {
      sum += chars[alpha.charAt(i)];
    }
    for(let i = 0; i < alpha.length; i++) {
      unigram[alpha.charAt(i)] = 100*(chars[alpha.charAt(i)] / sum);
    }
    return unigram;
  }

  /**
   * Returns all bigrams (no statistics)
   * @param txt
   * @param alpha 
   */
  public static bigram(txt: string, alpha: string) {
    const nonAlphaRx = new RegExp(`[^${alpha}]`,'g');
    txt = txt.replace(nonAlphaRx, '');
    let bis = [];
    for(let i = 0; i < txt.length - 1; i++) {
      bis.push(txt.substr(i, 2));
    }
    bis = Array.from(new Set(bis));
    return bis;
  }

  public static evaluate(solutions: solution[], alpha: string, delimiter?: string): any {
    const uniStats = this.stats.en.unigram; //TODO 
    const biStats = Object.keys(this.stats.en.bigram);
    const biBottom = this.stats.en.bigramBottom;
    const commonWords = this.stats.en.commonWords;
    const maxWordLength = 16 //Math.max(...commonWords.map(w => w.length));
    let maxValue = 0;
    let bestSolution: solution;

    const nonAlphaRx = new RegExp(`[^${alpha}]`,'g'); 
    for (let solution of solutions) {
      const sol = solution.result.replace(nonAlphaRx, '');
      const uni = this.unigram(sol, alpha);
      solution.stats = {};
      if (sol.length < 3) {
        console.error('evaluate cannot operate on string length below 3', solution); 
        return {};
      }
      
      // Unigram
      solution.stats.unigram = Object.keys(uni)
        .map((c: string) => Math.abs(uniStats[c] - uni[c]))
        .reduce((a: number, b: number) => a + b);     
      
      // Bigram
      solution.stats.bigram = this.bigram(sol, alpha)
        .map((b: string) => biStats.indexOf(b) !== -1 ? 1 : (biBottom.indexOf(b) !== -1 ? -1 : 0))
        .reduce((a: any, b: any) => a + b);
      
      // Words
      delimiter = delimiter || ' ';
      if (alpha.indexOf(delimiter) === -1 && solution.result.indexOf(delimiter) !== -1) {
        const words = solution.result.split(delimiter);
        solution.stats.words = words
          .map((w: string) => w && commonWords.indexOf(w) !== -1 ? w.length : 0)
          .reduce((a: number, b: number) => a + b);
      } else {
        //find words of size 2+ in continuous string 
        solution.stats.words = 0;
        const foundWords = [];
        for(let i = 0; i < sol.length - 1; i++) {
          for(let j = 2; j <= sol.length - i && j < maxWordLength; j++) {
            if (commonWords.indexOf(sol.substr(i, j)) !== -1) {
              solution.stats.words += j;
              foundWords.push(sol.substr(i, j));
            }            
          }
        }
        if(foundWords.length) {
          solution.delimitedResult = this.delimit(sol, foundWords);
        }
      }      
    }

    const allUnigramValues = solutions.map(s => s.stats.unigram).sort((a: number, b: number) => b - a); // descending
    const allBigramValues = solutions.map(s => s.stats.bigram).sort((a: number, b: number) => a - b); // ascending
    const allWordValues = solutions.map(s => s.stats.words).sort((a: number, b: number) => a - b);
    for (let solution of solutions) {
      solution.stats.val = solution.result.length > alpha.length ? allUnigramValues.indexOf(solution.stats.unigram) : 0;
      solution.stats.val += allBigramValues.indexOf(solution.stats.bigram);
      solution.stats.val += allWordValues.indexOf(solution.stats.words);
      if (maxValue < solution.stats.val) { 
        maxValue = solution.stats.val 
        bestSolution = solution;
      }
    }
    return bestSolution
  }

  public static delimit(text: string, words: string[]): string {
    const maxWordLength = Math.max(...words.map(w => w.length));
    const stats = {};
    for(let i = 0; i < text.length; i++) {
      stats[i] = [];
      for(let j = 1; j <= text.length - i && j <= maxWordLength; j++) {
        const word = text.substr(i, j);
        if (words.indexOf(word) !== -1) {
          stats[i].push(word);
        }
      }
      stats[i].sort((a: string, b: string) => b.length - a.length);
    }
    let result = '';
    let i = 0;
    let blind = false;
    let candidate = false;
    do {
      blind = true;
      if (!stats[i].length) {
        result += text.charAt(i++);
      } else {
        for(let word of stats[i]) {
          const next = i + word.length;
          if (next === text.length || stats[next] && stats[next].length) {
            if (candidate) { result += ' '; }
            result += word + ' ';
            i = next;
            blind = false;
            candidate = false;
            break;
          }
        }
        if (blind) {
          if (candidate) { result += ' '; }
          result += stats[i][0];
          i = i + stats[i][0].length;
          blind = true;
          candidate = true;
        }  
      }
    } while(i < text.length);
    return result;
  }

}

export class OneTimePad {

  private static _alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

  constructor() { }

  public static setAlphabet(alphabet: string): void {
    this._alphabet = alphabet;
  }

  public static encrypt(plaintext: string, key: string): string {
    const alpha = this._alphabet;
    if (!plaintext || plaintext.length === 0) {
      console.error('Missing value: plaintext');
      return;
    }
    if(!key || key.length === 0) {
      console.error('Missing value: key');
      return;
    }
    if (plaintext.length > key.length) {
      console.error('One time pad key is shorter than plaintext');
      return;
    }
    let keypos = 0;
    let cipher = "";
    let alphaLen = alpha.length;
    for (let i = 0; i < plaintext.length; i++) {
      let p = alpha.indexOf(plaintext.charAt(i));
      let k = alpha.indexOf(key.charAt(keypos));
      if (p === -1) {
        cipher += plaintext.charAt(i);
        continue;
      }
      if (k === -1) {
        console.error('Key character not part of alphabet', key.charAt(keypos), 'key position:', keypos);
        return;
      }
      cipher += alpha.charAt((p + k) % alphaLen);
      keypos++;
    }
    return cipher;
  }

  public static decrypt(ciphertext: string, key: string): string {
    const a = this._alphabet;
    const n = a.length;
    const reverseKey = key.split('').map(k => a.charAt((2 * n - a.indexOf(k)) % n)).join('');
    return this.encrypt(ciphertext, reverseKey);
  }
}

export class RotN {
  private static _alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

  constructor() { }

  public static setAlphabet(alphabet: string): void {
    this._alphabet = alphabet;
  }

   /**
   * Encrypt plaintext using specified shift
   * @param plaintext 
   * @param shift 
   */
  public static encrypt(plaintext: string, shift: number): string {
    const alpha = this._alphabet;    
    let result = "";
    for (let i = 0; i < plaintext.length; i++) {
      let char = plaintext.charAt(i);
      if(alpha.indexOf(char) == -1) {
        result += char;
      }
      else {
        result += alpha.charAt((alpha.indexOf(char) + shift) % alpha.length);
      }
    }
    return result;
  }

  /**
   * Decrypt cipher using specified shift
   * @param cipher 
   * @param shift 
   */
  public static decrypt(cipher: string, shift: number): string {
    const alpha = this._alphabet;
    return this.encrypt(cipher, (alpha.length - shift));
  }

  /**
   * Generate all possible solutions
   * @param chipher 
   */
  private static all(chipher: string): any[]
  {
    const alpha = this._alphabet;
    var results = [];
    for (let i = 0; i < alpha.length; i++) {
      results.push({
        key: i,
        result: this.decrypt(chipher, i)
      });
    }
    return results;
  }


  public static solve(cipher: string) {
    const best = Tools.evaluate(this.all(cipher), this._alphabet);
    return best;
  }

}

export class Deranged {
  private static _alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

  constructor() { }

  public static setAlphabet(alphabet: string): void {
    this._alphabet = alphabet;
  }

  public static encrypt(plaintext: string, key: string) {
    const alpha = this._alphabet;
    if (key.length < alpha.length) {
      key = [...(new Set(key + alpha))].join('');
      console.debug('Deranged alphabet key:', key);
    } else if (key.length > alpha.length) {
      console.error('Deranged alphabet key > alphabet');
      return;
    }
    const map = {};
    key.split('').forEach((c, i) => map[c] = alpha[i]);
    let cipher = plaintext.split('').map(x => map[x] || x).join('');

    return cipher;
  }

  public static decrypt(cipher: string, key: string): string {
    const a = this._alphabet;
    const n = a.length;
    if (key.length < a.length) {
      key = [...(new Set(key + a))].join('');
    }
    const reverseKey = key.split('').map(k => a.charAt((2 * n - a.indexOf(k)) % n)).join('');
    return this.encrypt(cipher, reverseKey);
  }
}

export class SubstitutionService {

  private static _alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

  constructor() { }

  public static setAlphabet(alphabet: string): void {
    this._alphabet = alphabet;
    RotN.setAlphabet(this._alphabet);
    Deranged.setAlphabet(this._alphabet);
    OneTimePad.setAlphabet(this._alphabet);
  }

  public static testDelimit() {
   console.log(Tools.delimit('AUTISMISKNOWNASASPECTRUMDISORDERBECAUSETHEREISWIDEVARIATIONINTHETYPEANDSEVERITYOFSYMPTOMSPEOPLEEXPERIENCEASDOCCURSINALLETHNICRACIALANDECONOMICGROUPSALTHOUGHASDCANBEALIFELONGDISORDERTREATMENTSANDSERVICESCANIMPROVEAPERSONSSYMPTOMSANDABILITYTOFUNCTION', Tools.stats.en.commonWords)); 
  }

  /**
   * Decrypt with fibonacci sequence as key
   * @param cipher 
   */
  public static fibonacci(cipher: string): any {
    if(cipher.length > 74) return '';
    const alpha = this._alphabet;
    const alphaLen = alpha.length;
    const sequence = Sequence.fibonacci(cipher.length + 5);
    const key = sequence.map(x => alpha.charAt(x % alphaLen)).join('');
    
    let solutions = [];
    for (let i = 0; i <= 5; i++) {
      solutions.push({
        key: i,
        result: OneTimePad.decrypt(cipher, key.substr(i))
      });
    }
    const best = Tools.evaluate(solutions, alpha);
    console.log('Fibonacci best result', best);
    return best.result;
  }

  /**
   * Decrypt cipher using Ceasar cipher
   * A Caesar cipher, also known as Caesar's cipher, the shift cipher, Caesar's code or Caesar shift, is one of the simplest and most widely known encryption techniques. It is a type of substitution cipher in which each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet. For example, with a left shift of 3, D would be replaced by A, E would become B, and so on.
   * @param cipher 
   */
  public static caesar(cipher: string): string {
    const best = RotN.solve(cipher);
    console.log('Caesar best result', best); 
    return best.result;
  }

  /**
   * Decrypt cipher using Atbash
   * The Atbash cipher is a particular type of monoalphabetic cipher formed by taking the alphabet (or abjad, syllabary, etc.) and mapping it to its reverse, so that the first letter becomes the last letter, the second letter becomes the second to last letter, and so on.
   * https://en.wikipedia.org/wiki/Atbash
   * @param chipher 
   */
  public static atbash(chipher: string): string {
    return Deranged.encrypt(chipher, this._alphabet.split('').reverse().join(''));
  }

}
